RAII
----
Resource Acquisition Is Initialisation.

Take advantage of how object are destroyed at end of scope to create self-cleaning code.

Create classes that acquire resources in their constructors and release them in the destructors, instead of having `open()`/`close()` or `init()`/`copyFrom()`/`destroy()`.

TIP: The standard library supports it for `unique_ptr`, `shared_ptr`, `lock_guard` etc.

TIP: UE4/UDK supports with classes like `FScopedTransaction`, `FLogScopedVerbosityOverride`, `TScopedCallback` etc

RAII - examples
---------------
[source,cpp]
-------------------------------------------------------------------------------
struct SmartFile {
    FILE* handle = nullptr;
    SmartFile(const char *path) {
        handle = fopen(path, "rb");
    }
    ~SmartFile() {
        if (handle) fclose(handle);
    }
};

void func() {
    SmartFile f("c:\\file.bin");

    some_function(); // if this throws, file still closes

    if (!everything_ok()) return; // early out, file cleaned up

    fread(buffer, size, 1, f.handle);
    // ...
	
} // file naturally closed
-------------------------------------------------------------------------------

scope_exit
----------
Automatic RAII idiom invented originally by Andrei Alexandrescu. Also called *Scoped Guard*.

Good talk by the author: https://www.youtube.com/watch?v=WjTrfoiB0MQ

Alternative implementation: https://www.youtube.com/watch?v=lKG1m2NkANM

Quick and usable article by the guys of The Witness/Braid: http://the-witness.net/news/2012/11/scopeexit-in-c11/

"official" release maintained by Facebook: https://github.com/facebook/folly/blob/master/folly/ScopeGuard.h

scope_exit - examples
---------------------
[source,cpp]
-------------------------------------------------------------------------------
{
    int * ip = new int[16];
    SCOPE_EXIT(delete [] ip);

    if (error)
        throw SomeException(); // the delete[] will be triggered 
    
    FILE * fp = fopen("test.out", "wb");
    SCOPE_EXIT(fclose(fp));
    
    if (something)
        return; // early out, file will be closed, delete[] executed       
    // more code..
    
} // end of scope, the delete and file close are triggered naturally
-------------------------------------------------------------------------------

scope_exit - implementation
---------------------------
[source,cpp]
-------------------------------------------------------------------------------
template <typename F>
struct ScopeExit {
    ScopeExit(F f) : f(f) {}
    ~ScopeExit() { f(); }
    F f;
};

// generic factory, use it like: auto cleanup = MakeScopeExit( ...lambda + code... )
template <typename F>
ScopeExit<F> MakeScopeExit(F f) {
    return ScopeExit<F>(f);
};

// macro helper that is ugly but saves on typing and lets you not bother with keeping variables
#define STRING_JOIN2(arg1, arg2) DO_STRING_JOIN2(arg1, arg2)
#define DO_STRING_JOIN2(arg1, arg2) arg1 ## arg2
#define SCOPE_EXIT(code) \
    auto STRING_JOIN2(scope_exit_, __LINE__) = MakeScopeExit( [&](){ code } )
-------------------------------------------------------------------------------

//TODO: mention Andrei's version which used operator + and lambda header

