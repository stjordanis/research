<<New Language Features>>
-------------------------

uniform initialisation
----------------------
C++03 had multiple (and inconsistent) methods to declare/initialise data:

[role="incremental"]
* `<nothing>` - default initialisation

[role="incremental"]
[source,cpp]
int i;             // integer with undefined value
Widget w;          // calls default constructor if any

[role="incremental"]
* `()` or `(arg, ...)` - default or direct initialisation

[role="incremental"]
[source,cpp]
int i = int();     // zero-init integer
int f(5);          // an integer with value 5
Widget();          // calls default contructor, temp object

[role="incremental"]
[source,cpp]
int f();           // Error: "most vexing parse"
                   // this is a function declaration: int (*)(void)
;
Widget w(param);   // OK: copy/convert construction if param is variable
Widget w(Param()); // Error: if Param is type - function declaration again

[role="incremental"]
* `{ item1, ... }` - array or aggregate initialisation
** _aggregate_ is class without constructors, private/protected, bases, virtual

uniform initialisation (continued)
----------------------------------
C++11 introduces the `{}` that can be used in all these cases:

[role="incremental"]
[source,cpp]
int{};
int i{};             // OK: not function declaration
Widget w{};          // OK: again
Widget w{other};     // OK: copy or conversion construction
Widget w = other;    // OK: still construction, not assignment
Widget w = {other};  // OK: the same 

[role="incremental"]
[source,cpp]
int arr[]                   = { 1, 2, 3, 4, 5 };
int matrix[2][2]            = { {5, 6}, {7, 8} };
std::vector<int> v          = { 1, 2, 3, 4, 5 };
std::map<int,std::string> m = { {0, "zero"}, {1, "one"}, {2, "two"} };

[role="incremental"]
[source,cpp]
struct Widget {
    int i;
    double d;
}
;
Widget factory() {
    return {1, 1.0};
}

uniform initialisation (continued)
----------------------------------
NOTE: Doesn't do automatic narrowing conversion!

[role="incremental"]
[source,cpp]
int i = 1.0;        // OK: implicitly converts from float to int
int i = { 1.0 };    // Error: won't compile
float f = { 3 };    // OK: not narrowing just another way of saying 3.0

[role="incremental"]
TIP: Leverage the initializer list:

[role="incremental"]
[source,cpp]
struct Widget {
    Widget(std::initializer_list<int> list) {
        for (const int *i = list.begin(); i != list.end(); ++i) { // no [] operator
            *i; // do some work...
        }
    }
}
;
Widget w = { 0, 1, 2, 3 };

auto
----
The type of the variable that is being declared will be automatically deduced from its initializer.

[role="incremental"]
[source,cpp]
 int j = 0;         // Variable j is explicitly type int.
auto k = 0;         // Variable k is implicitly type int because 0 is an integer.
auto d = 3.14;      // Variable d is double
auto f = 3.14f;     // Variable f is float

[role="incremental"]
[source,cpp]
map<int, list<string>>::iterator i = m.begin(); 
                            auto i = m.begin();
						   
[role="incremental"]
[source,cpp]
int data;
auto value = data;        // type is: int
auto &ref = data;         // type is: int &

[role="incremental"]
[source,cpp]
auto ptr = &data;         // type is: int *
auto *ptr = &data;        // type is: int *

[role="incremental"]
[source,cpp]
auto i = { 42 };          // type is std::initializer_list<int> !!!

auto (continued)
----------------
The rules of this deduction are the same of `T` from template declaration.

[role="incremental"]
[source,cpp]
auto a = expr;    /* is actually: */   template<class T> void temp(T a) {}
                                       temp(expr); // compile and extract type of expr

[role="incremental"]
This means that it doesn't deduct(it *drops*) `references` and `const` !!!

[role="incremental"]
[source,cpp]
float& f1();
auto a1 = f1();          // a1 is value float, not reference!
;
const int f2();
auto a2 = f2();         // a2 is not const!
;
const Widget& f3();
auto a3 = f3();         // a3 is not reference, not const, it will be a copy!!!

[role="incremental"]
[source,cpp]
auto &a1 = f1();        // fixed!
const auto a2 = f2();   // fixed!
const auto &a3 = f3();  // fixed!

// Scott Meyer: https://www.youtube.com/watch?v=wQxj20X-tIU
// http://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/
// http://en.cppreference.com/w/cpp/language/auto

decltype
--------
Inspects the declared type of an entity or queries the type and value category of an expression.

[role="incremental"]
[source,cpp]
int i;
decltype(i) x;           // type is int

[role="incremental"]
[source,cpp]
struct A { double x; };
const A* a = new A{};
;
decltype(a) x1;         // type is const A *
decltype(a->x) x2;      // type is double

[role="incremental"]
[source,cpp]
const int func();
decltype(func()) x1;    // type is const int
decltype(func) x2;      // function declaration

[role="incremental"]
[source,cpp]
std::vector<int> v = { 0, 1, 2, 3 };
decltype(v)::iterator i = v.begin();

decltype (continued)
--------------------
`decltype` will get different results from `auto` in similar situations:

[role="incremental"]
[source,cpp]
const int& x;
;
auto a1 = x;           // a1 is int
decltype(x) a2;        // a2 is const int &

[role="incremental"]
C++14 "fixes" this:

[role="incremental"]
[source,cpp]
decltype(auto) a2 = x; // a2 is const int &

range-based for loop
--------------------
More readable for loop over a range. 

[role="incremental"]
[source,cpp]
int array[] = {0, 1, 2, 3, 4, 5};
for(int n: array)
    std::cout << n; // access by value (like regular for usage)

[role="incremental"]
[source,cpp]
std::vector<int> vector = {0, 1, 2, 3, 4, 5};
for(const int &i : vector)
    std::cout << i; // access by reference
	
[role="incremental"]
[source,cpp]
for(int n: {0, 1, 2, 3, 4, 5})
    std::cout << n;

[role="incremental"]
[source,cpp]	
std::vector<Big_Object> big_list = {...};
for(auto i: big_list)
    std::cout << i; // DANGER - will value copy every iteration!!!

[role="incremental"]
TIP: works on anything that has .begin() and .end() or the free functions equivalent

constexpr
---------
Declares that it is possible to evaluate the value of the function or variable at compile time.

[role="incremental"]
Excellent replacement for macros: they are full C++ entities with scope and are debug-able if needed.

[role="incremental"]
[source,cpp]
/* BAD */
#define MAGIC 0xFF04

[role="incremental"]
[source,cpp]
/* GOOD */
constexpr int MAGIC = 0xFF04;

[role="incremental"]
[source,cpp]
/* BAD */
#define FUNC(a, b) ((a) + (b) - 123)

[role="incremental"]
[source,cpp]
/* GOOD */
constexpr int FUNC(int a, int b)
{
        return a + b - 123;
}
// NOTE: can be template

constexpr - under the hood
--------------------------
[role="incremental"]
[source,cpp]
int factorial (int n)
{
    return n > 0 ? n * factorial( n - 1 ) : 1;
}
int i = factorial(5);

[role="incremental"]
[source,cpp]
factorial(int):
        mov     eax, 1
        test    edi, edi
        jle     .L6
        push    rbx
        mov     ebx, edi
        lea     edi, [rdi-1]
        call    factorial(int)
        imul    eax, ebx
        pop     rbx
.L6:
        rep ret
        sub     rsp, 8
        mov     edi, 5
        call    factorial(int)
        mov     DWORD PTR i[rip], eax
        add     rsp, 8
        ret

constexpr - under the hood (continued)
--------------------------------------
[role="incremental"]
[source,cpp]
constexpr int factorial (int n)
{
    return n > 0 ? n * factorial( n - 1 ) : 1;
}
int i = factorial(5);

[role="incremental"]
[source,cpp]
i:
        .long   120

constexpr (continued)
---------------------
constexpr functions in C++11 are limited in what they can use/do:

* only one return statement (but supports recursion)
* no if/while/for/switch
* no local variables.

C++14 relaxes these requirements a lot - but sadly not even VS 2015 supports it

[role="incremental"]
TIP: Additional info:

[role="incremental"]
* `constexpr` means implicitly `const` and `inline`
* a constexpr function with non-literal, non-constexpr arguments will turn into a normal runtime function

// https://www.youtube.com/watch?v=fZjYCQ8dzTc

strong enum
-----------
C++03 `enum`'s have big problems:

[role="incremental"]
* implicitly convert to an integer, causing errors when that is not desired
* export their enumerators to the surrounding scope, causing name clashes
* the underlying type of an enum cannot be specified

[role="incremental"]
[source,cpp]
enum Alert { green, yellow, red };  // what's the type?
Alert r = Alert::red;               // Error, but why?
int b = red;                        // OK, but where is it coming from and why convert to int?

[role="incremental"]
The new C++11 `enum` alternative:

[role="incremental"]
[source,cpp]
enum class NewAlert { green, yellow, red };  // C++11 scoped, strong enum
enum class Direction : char { left, right }; // custom underlying type, default is int

[role="incremental"]
[source,cpp]
NewAlert r = NewAlert::red;         // OK now
int q = NewAlert::red               // Error: no conversion to int any more
Direction d = 1;                    // Error: no conversion from int

noexcept
--------
In C++03 functions declarations could specify their exceptions via `throw()` statements, but it never caught on and it had problems.

[source,cpp]
[role="incremental"]
void func() throw(std::exception, int);  // the list of potential exceptions that trigger inside func

[role="incremental"]
Since C++11 there is a way simpler method: `noexcept`

[role="incremental"]
[source,cpp]
void func() noexcept;                    // this function will never throw exceptions
void func() noexcept(true);              // same thing
void func() noexcept(<expression>);      // bool constexpr expression for cases when func has exceptions

[role="incremental"]
[source,cpp]
bool has_errors = noexcept(func());      // operator version for checking

[role="incremental"]
Why care?

[role="incremental"]
* A function declared with `noexcept` enables compilers to generate more efficient, optimised code!
* Some `std` containers like `std::vector` won't move elements unless the move constructor is `noexcept`!
* If a noexcept function does throw an exception, `std::terminate` is called immediately

syntactic sugar
---------------
[role="incremental"]
* `using` - type alias equivalent to `typedef` but better

[role="incremental"]
[source,cpp]
using my_int = int;                    typedef int my_int;
using func = void (*) (int,int);       typedef void (*func)(int, int);

[role="incremental"]
[source,cpp]
template<class T> using pointer = T*;  // no equivalent with typedef
pointer<int> p;                        // alias for int *

[role="incremental"]
* string literals

[role="incremental"]
[source,cpp]
  "normal ASCII string"
 L"wide char string"
u8"string encoded in UTF-8"
 u"string encoded in UTF-16"
 U"string encoded in UTF-32"
 R"delimiter( string with anything unescaped like \ / " )delimiter" // delimiter can be any 16 character string, including empty

[role="incremental"] 
** the `R` one can be combined with the others (to specify Unicode etc)
** they all (if same type) support multi-line

alignas, alignof
----------------
New keywords to control memory alignment for declarations (before it was compiler specific with #pragma etc)

[role="incremental"]
[source,cpp]
/* every object of type sse_t will be aligned to 16-byte boundary */
struct alignas(16) sse_t
{
  float sse_data[4];
};

[role="incremental"]
[source,cpp]
[role="incremental"]
/* the array "cacheline" will be aligned to 128-byte boundary */
alignas(128) char cacheline[128];

[role="incremental"]
[source,cpp]
/* get the alignment of something */
alignof(char)      // returns 1
alignof(int *)     // returns 8 on x64 systems
alignof(sse_t)     // returns 16

[role="incremental"]
[source,cpp]
/* equivalent statements */
alignas(float)      alignas(alignof(float))

static_assert
-------------
Compile time error messages: `static_assert (constexpr-expression, error-message);`

[role="incremental"]
[source,cpp]
template<class T>
struct Widget {
    static_assert(sizeof(int) <= sizeof(T), "Type not big enough!");
	// ...
}
;
Widget<char> w;              // compile error!

[role="incremental"]
[source,cpp]
static_assert(sizeof(unsigned int) * CHAR_BIT == 32, "Unsupported architecture!");

[role="incremental"]
[source,cpp]
template <class T>
void func(T value) {
    static_assert(std::is_base_of<MyBase, T>::value, "Type must be derived from MyBase");
    // ...
};

// https://msdn.microsoft.com/en-us/library/dd293588.aspx
// http://stackoverflow.com/questions/1647895/what-does-static-assert-do-and-what-would-you-use-it-for
// https://en.wikipedia.org/wiki/C%2B%2B11#Static_assertions

