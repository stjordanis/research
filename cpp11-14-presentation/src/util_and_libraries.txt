<<Utilities & Libraries>>
-------------------------

new libraries
-------------
Everything lives under the `std::` namespace

[role="incremental"]
* `#include <initializer_list>`
** `initializer_list<T>`
** used to consume T = { ... } etc

[role="incremental"]
* `#include <utility>`
** `move` for forcing move semantics
** `forward` for passing function arguments while preserving lvalue/rvalue'ness
** `swap`

[role="incremental"]
* `include <tuple>`
** to be discussed separately

[role="incremental"]
* `#include <functional>`
** `function` wraps callable object of any type with specified function call signature 
** `hash` provides hashes for built in types and strings
** more constructs or functors like `less<>`, `plus<>` that can be more streamlined than lambda's sometimes 

new libraries (continued)
-------------------------
[role="incremental"]
* `#include <memory>`
** smart pointers - to be discussed separately
** allocators - class templates encapsulating memory allocation strategy

[role="incremental"]
* `#include <array>`
** `array` container that encapsulates fixed size arrays
** no overhead to classic C-style array `T[N]` but safer: doesn't decay to `T*` for ex

[role="incremental"]
* `#include <unordered_???>`
** associative containers (set, map, etc) that are not sorted, allowing optimisations
** `unordered_map` is a hash-table (`map` is not)

[role="incremental"]
* `#include <chrono>`
** clock and time duration management - to be discussed separately

[role="incremental"]
* `#include <random>`
** classes that generate random and pseudo-random numbers - to be discussed separately

new libraries (continued)
-------------------------

[role="incremental"]
* `#include <ratio>`
** compile-time rational arithmetic support
** example: `ratio_equal<ratio<2,3>, ratio<4,6>>::value`

[role="incremental"]
* `#include <cfenv>`
** control floating-point environment: rounding, overflow, division by zero, etc

[role="incremental"]
* `#include <regex>`
** dealing with regular expressions
** `basic_regex`, `match_results`, `regex_search` etc

[role="incremental"]
* `#include <type_traits>`
** compile-time template-based interface to query or modify the properties of types
** `is_void`, `is_floating_point`, `is_enum`, `is_pointer` etc
** `is_lvalue_reference`, `is_rvalue_reference`
** `is_const`, `is_pod`, `is_polymorphic`, `is_base_of` etc
** `remove_const`, `remove_reference`, `make_signed`, etc

new libraries (continued)
-------------------------
[role="incremental"]
* `#include <thread>`
** cross-platform support for threads
** utilities for the current thread: `yield`, `sleep_for` etc

[role="incremental"]
* `#include <mutex>`
** synchronization between threads: `mutex`, `recursive_mutex` etc
** mutex management: `unique_lock`, `lock_guard`, etc
** `call_once` call a function exactly once, even if called from several threads

[role="incremental"]
* `#include <condition_variable>`
** synchronization primitive that allows multiple threads to communicate with each other
** via `.wait()` and `.notify_one()`/`.notify_all()`

[role="incremental"]
* `#include <future>`
** `async` runs a function asynchronously (potentially in a new thread) and returns a `future` that will hold the result

[role="incremental"]
* `#include <atomic>`
** `atomic<>` integral types wrapper that allows lockless programming
** `memory_order` specifies how regular, non-atomic memory accesses are to be ordered around an atomic operation

std::tuple
----------
A kind of generalized anonymous `struct`. For only 2 members there's also `std::pair`. 

Useful to return multiple values from functions (ex: data + error flag)

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
std::tuple<int, float, std::string>              struct tuple {
                                                     int _0;
                                                     float _1;
                                                     std::string _2;
                                                 };

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
auto t = std::make_tuple(1, 3.14f, "hello"s);    auto t = tuple {1, 3.14f, "hello"};

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
std::get<0>(t);                                  t._0;
std::get<float>(t); // C++14 only                no equivalent 

[role="incremental"]
TIP: UE4 equivalent is TTuple

// http://www.oracle.com/technetwork/articles/servers-storage-dev/c-array-containers-2252536.html

std::tuple - examples
---------------------

[role="incremental"]
[source,cpp]
std::tuple<int, int, int, int> CalculateSize() {
    // logic ...
    return std::make_tuple(x, y, width, height);
}

[role="incremental"]
[source,cpp]
std::tuple<Widget, bool> GetWidget() {
    Widget work{};
    // logic ...
    if (error) {
        return std::make_tuple(Widget{}, false);
    } else {
        return std::make_tuple(std::move(work), true);
    }
}

[role="incremental"]
[source,cpp]
auto w = GetWidget();
if (std::get<bool>(w)) {
    std::get<Widget>(w).method();
}

std::tuple - more examples 
--------------------------
`std::tie` - tuple of lvalue references

[role="incremental"]
[source,cpp]
----
std::tuple<int, int, int, int> CalculateSize() { ... }

int x, y, width, height;
std::tie(x, y, width, height) = CalculateSize();
----

[role="incremental"]
[source,cpp]
int x, y;
std::tie(x, y, std::ignore, std::ignore) = CalculateSize();

[role="incremental"]
[source,cpp]
/* tuple supports lexicographically comparisons of its elements */
float x1, y1, z1;
float x2, y2, z2;
return std::tie(x1, y1, z1) < std::tie(x2, y2, z2);

std::unique_ptr
---------------
Smart pointer that retains sole ownership of an object and destroys it when it goes out of scope.

[role="incremental"]
[source,cpp]
std::unique_ptr<int> ptr { new int {42} };
std::unique_ptr<int> ptr = std::make_unique<int>(42); // since C++14

[role="incremental"]
[source,cpp]
std::unique_ptr<int []> ptr { new int [10] };
std::unique_ptr<int []> ptr = std::make_unique<int []>(42); // 42 elements !!!

[role="incremental"]
[source,cpp]
int i = *ptr;
ptr[5] = 0;
ptr->method(); // given unique_ptr<Widget> ...

[role="incremental"]
[source,cpp]
if (ptr) { ... }
if (ptr.get() != nullptr) { ... }

std::unique_ptr (continued)
---------------------------
No two `unique_ptr` instances can manage the same object.

[role="incremental"]
No overhead just like normal pointer but can optionally store a custom deleter function.

[role="incremental"]
Typical usage:

[role="incremental"]
* ownership (acquiring / passing) of dynamically allocated objects 
* safety by guaranteeing deletion on both
** normal exit
** exit through exception/error
* as the element type in move-aware containers, such as `std::vector`, which hold pointers to dynamically-allocated objects 

[role="incremental"]
TIP: UE4 equivalent is TUniquePtr.

std::unique_ptr - examples
--------------------------
[source,cpp]
----
{ // begin scope
    std::unique_ptr<int> ptr_1 = std::make_unique<int>(42);

    std::unique_ptr<int> ptr_2 = ptr_1; // Compile error!!! cannot copy

    std::unique_ptr<int> ptr_3 = std::move(ptr_1);
    // Transfers ownership.
    // ptr_3 now owns the memory and ptr_1 is rendered invalid.

} // end of scope: ptr_3 will be destroyed, ptr_1 is empty so nothing happens
----

std::unique_ptr - another example
---------------------------------
[source,cpp]
----
void do_work()
{
    auto file_closer = [](FILE* f) {
        ::fclose(f);
    };

    std::unique_ptr<FILE, decltype(file_closer)> file = { ::fopen("output.bin", "wb"), file_closer };

    // more code...

    if (some_condition) {
        ::fwrite(&data, sizeof(data), 1, file.get());
    } else {
        return; // file closed!
    }

    // more code...

} // end of scope: file will be closed gracefully
----

std::shared_ptr
---------------
Smart pointer that retains shared ownership of an object. 

The referenced object will be destroyed _only_ when all copies of the `shared_ptr` have been destroyed.

[role="incremental"]
[source,cpp]
std::shared_ptr<int> p1 { new int {42} };
std::shared_ptr<int> p1 = std::make_shared<int>(42);
	
[role="incremental"]
More overhead than normal pointer (due to need of storing the reference count). Can also contain a custom deleter function.

[role="incremental"]
Typical usage:

[role="incremental"]
* safe shared ownership of data
* multi-threaded safety of shared access (but not modification)

[role="incremental"]
TIP: UE4 equivalent is TSharedPtr.

std::weak_ptr
-------------
Smart pointer that holds a non-owning ("weak") reference to an object that is managed by `std::shared_ptr`.

Models temporary ownership:

* when an object needs to be accessed only if it exists
* and it may be deleted at any time by someone else

[role="incremental"]
To actually be used it will be converted into a temporary `std::shared_ptr`.

[role="incremental"]
TIP: UE4 equivalent is TWeakPtr.

std::shared_ptr/weak_ptr - examples
-----------------------------------
[source,cpp]
----
{
    std::shared_ptr<int> p1 = std::make_shared<int>(5);

    {
        std::shared_ptr<int> p2 = p1;  // add a new reference
        std::weak_ptr<int> wp1 = p1;   // doesn't count as new reference
        
        int n = *p2;                   // dereference like normal pointer

        int q = wp1.expired() ? 0 : *(wp1.lock()); // safe dereference

    } // end of this scope, p2 and wp1 destroyed but not the owned object 

} // p1 is destroyed and so is the object
----

random - old way
----------------
C++03 only had `srand()` and `rand()` which have a lot of problems:

[role="incremental"]
[source,cpp]
#include <stdlib.h>
#include <time.h>
srand(time(NULL));
int i = rand() % 100;

[role="incremental"]
* Lots of problems:
* seeding based on `time()` has only 1Hz frequency
* 32 bit seed only, weird unsigned to `time_t` warnings
* `rand()` has only [0..32767] range
* non-uniform distribution, applying `%` can skew probabilities
* uses Linear Congruential Generator which is weak and has low period
* hard to convert to floats - needs bad hacks like `rand() * 1.0 / RAND_MAX`

random - new and better way
---------------------------
C++11 introduces a new paradigm by separating engines and distributions:

[role="incremental"]
*Random number engines* - algorithms that produce integer sequences:

[role="incremental"]
* `linear_congruential_engine`
** already prepared typedefs: `minstd_rand`, ...
* `mersenne_twister_engine`
** already prepared typedefs: `mt19937`, `mt19937_64`
* `subtract_with_carry_engine`
** already prepared typedefs: `ranlux24`
* `random_device`
** non-deterministic true random number generator using hardware entropy source 

[role="incremental"]
*Random number distributions* - convert the output of engines:

[role="incremental"]
*  `uniform_int_distribution`, `uniform_real_distribution`, etc
* `bernoulli_distribution`, `poisson_distribution`, etc
* `normal_distribution`, `discrete_distribution`, etc

random - example
----------------
TODO:

