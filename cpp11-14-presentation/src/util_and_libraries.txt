<<Utilities & Libraries>>
-------------------------

std::unique_ptr
---------------
Smart pointer that retains sole ownership of an object and destroys it when it goes out of scope.

No two unique_ptr instances can manage the same object.

0 overhead to normal pointer but can optionally store a custom deleter function.

TIP: UE4 equivalent is TUniquePtr.

std::unique_ptr - examples
--------------------------
[role="incremental"]
[source,cpp]
-------------------------------------------------------------------------------
{
    std::unique_ptr<int> p1(new int(5));
    std::unique_ptr<int> p1 = std::make_unique<int>(5); // since C++14

    std::unique_ptr<int> p2 = p1; // Compile error!!! cannot copy
    std::unique_ptr<int> p3 = std::move(p1); // Transfers ownership. p3 now owns the memory and p1 is rendered invalid.

    // end of scope: p3 will be destroyed, p1 is empty so nothing happens
}
-------------------------------------------------------------------------------

[role="incremental"]
[source,cpp]
auto file_closer = [](FILE* f) {
    ::fclose(f);
};
std::unique_ptr<FILE, decltype(file_closer)> file = { ::fopen("output.bin", "wb"), file_closer };
// ...
fwrite(&data, sizeof(data), 1, file.get());

std::shared_ptr
---------------
Smart pointer that retains shared ownership of an object. 

The referenced object will be destroyed _only_ when all copies of the `shared_ptr` have been destroyed.

More overhead than normal pointer (due to need of storing the reference count). Can also contain a custom deleter function.

Has a lightweight variant `std::weak_ptr` that models temporary ownership: when an object needs to be accessed only if it exists, and it may be deleted at any time by someone else.

TIP: UE4 equivalent is TSharedPtr.

std::shared_ptr - examples
--------------------------
[source,cpp]
-------------------------------------------------------------------------------
{
    std::shared_ptr<int> p1(new int(5));
    std::shared_ptr<int> p1 = std::make_shared<int>(5); // preferred way of construction
    
    {
        std::shared_ptr<int> p2 = p1; // add a new reference
        std::weak_ptr<int> wp1 = p1; // doesn't count as new reference
        
    } // end of this scope, p2 destroyed but not the owned object 
    
} // p1 is destroyed and so is object
-------------------------------------------------------------------------------

std::tuple
----------
A kind of generalized anonymous `struct`. For only 2 members there's also `std::pair`. 

Useful to return multiple values from functions (ex: data + error flag)

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
std::tuple<int, float, std::string>              struct tuple {
                                                     int _0;
                                                     float _1;
                                                     std::string _2;
                                                 };

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
auto t = std::make_tuple(1, 3.14f, "hello");     auto t = tuple {1, 3.14f, "hello"};

[role="incremental"]
[source,cpp]
/* tuple */                                      /* struct equivalent */
std::get<0>(t);                                  t._0;
std::get<float>(t); // C++14 only                no equivalent 

// http://www.oracle.com/technetwork/articles/servers-storage-dev/c-array-containers-2252536.html

RAII
----
Resource Acquisition Is Initialisation.

Take advantage of how object are destroyed at end of scope to create self-cleaning code.

Create classes that acquire resources in their constructors and release them in the destructors, instead of having `open()`/`close()` or `init()`/`copyFrom()`/`destroy()`.

TIP: The standard library supports it for `unique_ptr`, `shared_ptr`, `lock_guard` etc.

TIP: UE4/UDK supports with classes like `FScopedTransaction`, `FLogScopedVerbosityOverride`, `TScopedCallback` etc

RAII - examples
---------------
[source,cpp]
-------------------------------------------------------------------------------
struct SmartFile {
    FILE* handle = nullptr;
    SmartFile(const char *path) {
        handle = fopen(path, "rb");
    }
    ~SmartFile() {
        if (handle) fclose(handle);
    }
};

void func() {
    SmartFile f("c:\\file.bin");

    some_function(); // if this throws, file still closes

    if (!everything_ok()) return; // early out, file cleaned up

    fread(buffer, size, 1, f.handle);
    // ...
	
} // file naturally closed
-------------------------------------------------------------------------------

scope_exit
----------
Automatic RAII idiom invented originally by Andrei Alexandrescu. Also called *Scoped Guard*.

Good talk by the author: https://www.youtube.com/watch?v=WjTrfoiB0MQ

Alternative implementation: https://www.youtube.com/watch?v=lKG1m2NkANM

Quick and usable article by the guys of The Witness/Braid: http://the-witness.net/news/2012/11/scopeexit-in-c11/

"official"" release maintained by Facebook: https://github.com/facebook/folly/blob/master/folly/ScopeGuard.h

scope_exit - examples
---------------------
[source,cpp]
-------------------------------------------------------------------------------
{
    int * ip = new int[16];
    SCOPE_EXIT(delete [] ip);

    if (error)
        throw SomeException(); // the delete[] will be triggered 
    
    FILE * fp = fopen("test.out", "wb");
    SCOPE_EXIT(fclose(fp));
    
    if (something)
        return; // early out, file will be closed, delete[] executed       
    // more code..
    
} // end of scope, the delete and file close are triggered naturally
-------------------------------------------------------------------------------

scope_exit - implementation
---------------------------
[source,cpp]
-------------------------------------------------------------------------------
template <typename F>
struct ScopeExit {
    ScopeExit(F f) : f(f) {}
    ~ScopeExit() { f(); }
    F f;
};

// generic factory, use it like: auto cleanup = MakeScopeExit( ...lambda + code... )
template <typename F>
ScopeExit<F> MakeScopeExit(F f) {
    return ScopeExit<F>(f);
};

// macro helper that is ugly but saves on typing and lets you not bother with keeping variables
#define STRING_JOIN2(arg1, arg2) DO_STRING_JOIN2(arg1, arg2)
#define DO_STRING_JOIN2(arg1, arg2) arg1 ## arg2
#define SCOPE_EXIT(code) \
    auto STRING_JOIN2(scope_exit_, __LINE__) = MakeScopeExit( [&](){ code } )
-------------------------------------------------------------------------------

//TODO: mention Andrei's version which used operator + and lambda header

