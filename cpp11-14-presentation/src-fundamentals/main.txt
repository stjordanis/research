C++ fundamentals
================
a tour of C++ for game dev

Purpose
-------
Teach new dogs old tricks :D

// Examples for embedding "live" code
//[subs="none"]
//<script src="http://ideone.com/e.js/ri7c1H" type="text/javascript" ></script>
//<iframe src="http://coliru.stacked-crooked.com/a/04497ca6860c5f8c" style="width:100%; height:200px;"></iframe>

Who am I
--------

[role="incremental"]
* Valentin Galea - Senior Core Tech
* valentin.galea@splashdamage.com

[role="incremental"]
NOTE: Talk assumes familiarity with programming and other languages

[role="incremental"]
TIP: Questions are welcomed throughout

Short C++ history
-----------------

[role="incremental"]
* 1972 - Dennis Ritchie, and later Ken Thompson, design C and use it to write 90% of Unix with it
* Late 70's - OOP becomes popular
* Early 80's - Bjarne Stroustrup at Bell Labs adds features to C to form "C with Classes"
* 1983 - The name `C++` starts getting used
* Late 80's and 90's - C++ gets lots of usage and traction
* 1998 - ISO standard: `C++98`
* 2003 - small addition to standard: `C++03`
* 2011 - big additions, new standard: `C++11`
* 2014 - medium level additions to standard: `C++14`
* 2017 - tried to be bigger in scope, reverted to small: `C++17`
* 2020 - the future...

//C++ timeline
//------------
//
//image:https://www.esrlabs.com/wp-content/uploads/2016/01/wg21-timeline.png[timeline]

What is C++?
------------

[quote, Bjarne Stroustrup, The C++ Programming Language]
C++ is a general-purpose programming language providing a direct and efficient model of hardware combined with facilities for defining lightweight abstractions.

[role="incremental"]
A core principle of C++ is:
_What you don't use, you don't pay for!_

[role="incremental"]
The language supports 4 programming styles:

[role="incremental"]
* Procedural programming
** owning from `C` the language is declarative and makes distictions between functions and data structures
* Data abstraction
** focus on designing interfaces, hiding implementation detail, abstract and concrete structures
* Object-oriented programming
** direct support for class hierarchies, run-time polymorphism, encapsulation
* Generic programming
** making possible algorithms that accept a variety of types - achieved by templates


The ISO Standard
----------------

TODO: standard vs implementators

TODO: quick state of current big compilers

TODO: notes about (page 136)

* implementation-default
* unspecified
* undefined behaviour

Compilation
-----------

// http://www.slideshare.net/LegalizeAdulthood/consuming-and-creating-libraries-in-c

TODO: mechanic of compilation

TODO: roles of diff components

TODO: declaration vs definition

TODO: one definition rule

TODO: libraries (!later session)

Preprocessor
------------

TODO: what it is and role

TODO: major directives

TODO: notes on abuse

Hello World
-----------

A most minimal C++ program:

[source]
int main() {
	return 0; // successful completion
}


The _textbook_ hello world:

[source]
#include <iostream>
int main() {
	std::cout << "Hello World!" << std::endl;
	// the return can be implicit for main
}

A _real world_ example:

//TODO:

Keywords and names
------------------

The language uses the following keywords:

[subs="none"]
++++++++++++++++++++++++++++++++++++++
<table border="1" cellpadding="5" cellspacing="0" style="td color: blue;"> <tbody><tr valign="top"> <td> alignas<br> alignof<br> asm<br> auto<br> bool<br> break<br> case<br> catch<br> char<br> char16_t<br> char32_t </td> <td> class<br> const<br> constexpr<br> const_cast<br> continue<br> decltype<br> default<br> delete<br> do<br> double<br> dynamic_cast </td> <td> else<br> enum<br> explicit<br> export<br> extern<br> false<br> float<br> for<br> friend<br> goto<br> if </td> <td> inline<br> int<br> long<br> mutable<br> namespace<br> new<br> noexcept<br> nullptr<br> operator<br> private<br> protected </td> <td> public<br> register<br> reinterpret_cast<br> return<br> short<br> signed<br> sizeof<br> static<br> static_assert<br> static_cast<br> struct </td> <td> switch<br> template<br> this<br> thread_local<br> throw<br> true<br> try<br> typedef<br> typeid<br> typename<br> union </td> <td> unsigned<br> using<br> virtual<br> void<br> volatile<br> wchar_t<br> while </td> </tr> </tbody></table>
++++++++++++++++++++++++++++++++++++++

Other than these any name composed of letters, digits and _ can be used as user identifiers (but not starting with digits).

Names are case-sensitive.

Identifiers constaining __ (double underline) or starting with underline and capital letter (ex: _Foo) are reserved.

Types and functions
-------------------

Basically all C++ programs are a mix of declarations of *types* and *functions* (that use them).

TODO: code samples of various types declaration

TODO: code samples of functions

Declarations and definitions
----------------------------

//http://en.cppreference.com/w/cpp/language/declarations

TODO: what's one, what's the other, the diff

TODO: schema of a declaration with all possible prefix/suffix

TODO: examples

Basic types
-----------

TODO: int, char, float and size chart

TODO: bool

TODO: void

TODO: C string

Literals
--------

TODO: integer literals

TODO: char and string literals

TODO: the suffixes (!later session)

Scope
-----

TODO: explain

TODO: examples

Object and values
-----------------

TODO: explanations

TODO: lvalue vs rvalue

Memory model / Lifetimes
------------------------

TODO: explain (page 167)

* Automatic
* Static
* Free store (Heap)
* Temporary objects
* Thread-local

Pointers
--------

TODO: diagram to ilustrate indirection mechanims

TODO: explain dereference

TODO: void *

TODO: nullptr

TODO: aritmethic (!later)

Pointers - Const
----------------

TODO: explain const in general sense

TODO: `const` vs `* const`

Arrays
------

TODO: basic array examples

TODO: string literals

TODO: accessing

TODO: how they decay into pointers and the gotchas

References
----------

A _one time pointer_, an object _alias_.

* allows access with the same syntax as the name of the object
* always refers to the object it was initialized from (and can never be re-assigned)
* there is no "null reference"

TODO: examples

References - Lvalue and const
-----------------------------

TODO: ...

References - Rvalues
--------------------

TODO: ...

Statements
----------

TODO: definitions and difference from expressions

TODO: comments

Statements - if
---------------

TODO: examples of if

TODO: how the condition works - implicit cast to bool

TODO: yoda style

TODO: assignment within

Statements - switch/case
------------------------

TODO: examples of switch with case's

TODO: default

TODO: explain fallthrough

Statements - while/do
---------------------

TODO: couple of examples for each

TODO: discourage do's

Statements - for
----------------

TODO: examples of normal for - explain the 3 parts

TODO: range-for

Statements - goto
-----------------

TODO: short examples

TODO: explain why is bad (also show the one good example)

Expressions
-----------
An expression is a sequence of operators and their operands, that specifies a computation.

Expression evaluation may produce a result (e.g., evaluation of `2+2` produces the result `4`) and may generate side-effects (e.g. evaluation of `std::printf("%d",4)` prints the character `4` on the standard output). 

TODO: couple of examples

TODO: order of evaluation

TODO: role of temp objects

Operators
---------

[subs="none"]
++++++++++++++++++++++++++++++++++++++
<table> <tbody><tr style="text-align:center"> <th colspan="7"> Common operators </th></tr> <tr style="text-align:center"> <td> <a href="/w/cpp/language/operator_assignment" title="cpp/language/operator assignment"> assignment</a> </td> <td> <a href="/w/cpp/language/operator_incdec" title="cpp/language/operator incdec"> increment<br>decrement</a> </td> <td> <a href="/w/cpp/language/operator_arithmetic" title="cpp/language/operator arithmetic"> arithmetic</a> </td> <td> <a href="/w/cpp/language/operator_logical" title="cpp/language/operator logical"> logical</a> </td> <td> <a href="/w/cpp/language/operator_comparison" title="cpp/language/operator comparison"> comparison</a> </td> <td> <a href="/w/cpp/language/operator_member_access" title="cpp/language/operator member access"> member<br>access</a> </td> <td> <a href="/w/cpp/language/operator_other" title="cpp/language/operator other"> other</a> </td></tr> <tr style="text-align:center"> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp">a <span class="sy1">=</span> b<br> a <span class="sy2">+</span><span class="sy1">=</span> b<br> a <span class="sy2">-</span><span class="sy1">=</span> b<br> a <span class="sy2">*</span><span class="sy1">=</span> b<br> a <span class="sy2">/</span><span class="sy1">=</span> b<br> a <span class="sy2">%</span><span class="sy1">=</span> b<br> a <span class="sy3">&amp;</span><span class="sy1">=</span> b<br> a <span class="sy3">|</span><span class="sy1">=</span> b<br> a <span class="sy3">^</span><span class="sy1">=</span> b<br> a <span class="sy1">&lt;&lt;=</span> b<br> a <span class="sy1">&gt;&gt;=</span> b</span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="sy2">++</span>a<br> <span class="sy2">--</span>a<br> a<span class="sy2">++</span><br> a<span class="sy2">--</span></span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="sy2">+</span>a<br> <span class="sy2">-</span>a<br> a <span class="sy2">+</span> b<br> a <span class="sy2">-</span> b<br> a <span class="sy2">*</span> b<br> a <span class="sy2">/</span> b<br> a <span class="sy2">%</span> b<br> ~a<br> a <span class="sy3">&amp;</span> b<br> a <span class="sy3">|</span> b<br> a <span class="sy3">^</span> b<br> a <span class="sy1">&lt;&lt;</span> b<br> a <span class="sy1">&gt;&gt;</span> b</span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="sy3">!</span>a<br> a <span class="sy3">&amp;&amp;</span> b<br> a <span class="sy3">||</span> b</span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp">a <span class="sy1">==</span> b<br> a <span class="sy3">!</span><span class="sy1">=</span> b<br> a <span class="sy1">&lt;</span> b<br> a <span class="sy1">&gt;</span> b<br> a <span class="sy1">&lt;=</span> b<br> a <span class="sy1">&gt;=</span> b</span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp">a<span class="br0">[</span>b<span class="br0">]</span><br> <span class="sy2">*</span>a<br> <span class="sy3">&amp;</span>a<br> a<span class="sy2">-</span><span class="sy1">&gt;</span>b<br> a.<span class="me1">b</span><br> a<span class="sy2">-</span><span class="sy1">&gt;</span><span class="sy2">*</span>b<br> a.<span class="sy2">*</span>b</span></span> </p> </td> <td> <p><span class="t-c"><span class="mw-geshi cpp source-cpp">a<span class="br0">(</span>...<span class="br0">)</span><br> a, b<br> <span class="sy4">?</span> <span class="sy4">:</span></span></span> </p> </td></tr> <tr> <th colspan="7"> Special operators </th></tr> <tr> <td colspan="7"> <p><a href="/w/cpp/language/static_cast" title="cpp/language/static cast"><tt>static_cast</tt></a> - converts one type to another related type <br> <a href="/w/cpp/language/dynamic_cast" title="cpp/language/dynamic cast"><tt>dynamic_cast</tt></a> - converts within inheritance hierarchies <br> <a href="/w/cpp/language/const_cast" title="cpp/language/const cast"><tt>const_cast</tt></a> - adds or removes cv qualifiers<br> <a href="/w/cpp/language/reinterpret_cast" title="cpp/language/reinterpret cast"><tt>reinterpret_cast</tt></a> - converts type to unrelated type<br> <a href="/w/cpp/language/explicit_cast" title="cpp/language/explicit cast">()</a> - C-style cast converts one type to another by a mix of <code>static_cast</code>, <code>const_cast</code>, and <code>reinterpret_cast</code> <br> <a href="/w/cpp/memory/new/operator_new" title="cpp/memory/new/operator new"><tt>new</tt></a> - allocates memory<br> <a href="/w/cpp/memory/new/operator_delete" title="cpp/memory/new/operator delete"><tt>delete</tt></a> - deallocates memory<br> <a href="/w/cpp/language/sizeof" title="cpp/language/sizeof"><tt>sizeof</tt></a> - queries the size of a type<br> <a href="/w/cpp/language/sizeof..." title="cpp/language/sizeof..."><tt>sizeof...</tt></a> - queries the size of a parameter pack <br> <a href="/w/cpp/language/typeid" title="cpp/language/typeid"><tt>typeid</tt></a> - queries the type information of a type<br> <a href="/w/cpp/language/noexcept" title="cpp/language/noexcept"><tt>noexcept</tt></a> - checks if an expression can throw an exception <br> <a href="/w/cpp/language/alignof" title="cpp/language/alignof"><tt>alignof</tt></a> - queries alignment requirements of a type  </p> </td></tr></tbody></table>
++++++++++++++++++++++++++++++++++++++

Operators - precedence
----------------------

[subs="none"]
++++++++++++++++++++++++++++++++++++++
<table border=1 style="border-collapse: collapse; line-height: 1.2em; "> <tbody><tr> <th style="text-align: left"> Precedence </th> <th style="text-align: left"> Operator </th> <th style="text-align: left"> Description </th> <th style="text-align: left"> Associativity </th></tr> <tr> <th> 1 </th> <td> <code>::</code> </td> <td> Scope resolution </td> <td style="vertical-align: top" rowspan="6"> Left-to-right </td></tr> <tr> <th rowspan="5"> 2 </th> <td > <code>a++</code>&nbsp;&nbsp; <code>a--</code> </td> <td > Suffix/postfix increment and decrement </td></tr> <tr> <td > <code><i>type</i>()</code>&nbsp;&nbsp; <code><i>type</i>{}</code> </td> <td > Functional cast </td></tr> <tr> <td > <code>a()</code> </td> <td > Function call </td></tr> <tr> <td > <code>a[]</code> </td> <td > Subscript </td></tr> <tr> <td > <code>.</code>&nbsp;&nbsp; <code>-&gt;</code> </td> <td > Member access </td></tr> <tr> <th rowspan="9"> 3 </th> <td > <code>++a</code>&nbsp;&nbsp; <code>--a</code> </td> <td > Prefix increment and decrement </td> <td style="vertical-align: top" rowspan="9"> Right-to-left </td></tr> <tr> <td > <code>+a</code>&nbsp;&nbsp; <code>-a</code> </td> <td > Unary plus and minus </td></tr> <tr> <td > <code>!</code>&nbsp;&nbsp; <code>~</code> </td> <td > Logical NOT and bitwise NOT </td></tr> <tr> <td > <code>(<i>type</i>)</code> </td> <td > C-style cast </td></tr> <tr> <td > <code>*a</code> </td> <td > Indirection (dereference) </td></tr> <tr> <td > <code>&amp;a</code> </td> <td > Address-of </td></tr> <tr> <td > <code>sizeof</code> </td> <td > Size-of </td></tr> <tr> <td > <code>new</code>&nbsp;&nbsp; <code>new[]</code> </td> <td > Dynamic memory allocation </td></tr> <tr> <td> <code>delete</code>&nbsp;&nbsp; <code>delete[]</code> </td> <td> Dynamic memory deallocation </td></tr> <tr> <th> 4 </th> <td> <code>.*</code>&nbsp;&nbsp; <code>-&gt;*</code> </td> <td> Pointer-to-member </td> <td style="vertical-align: top" rowspan="12"> Left-to-right </td></tr> <tr> <th> 5 </th> <td> <code>a*b</code>&nbsp;&nbsp; <code>a/b</code>&nbsp;&nbsp; <code>a%b</code> </td> <td> Multiplication, division, and remainder </td></tr> <tr> <th> 6 </th> <td> <code>a+b</code>&nbsp;&nbsp; <code>a-b</code> </td> <td> Addition and subtraction </td></tr> <tr> <th> 7 </th> <td> <code>&lt;&lt;</code>&nbsp;&nbsp; <code>&gt;&gt;</code> </td> <td> Bitwise left shift and right shift </td></tr> <tr> <th rowspan="2"> 8 </th> <td > <code>&lt;</code>&nbsp;&nbsp; <code>&lt;=</code> </td> <td > For relational operators &lt; and ≤ respectively </td></tr> <tr> <td> <code>&gt;</code>&nbsp;&nbsp; <code>&gt;=</code> </td> <td> For relational operators &gt; and ≥ respectively </td></tr> <tr> <th> 9 </th> <td> <code>==</code>&nbsp;&nbsp; <code>!=</code> </td> <td> For relational operators = and ≠ respectively </td></tr> <tr> <th> 10 </th> <td> <code>a&amp;b</code> </td> <td> Bitwise AND </td></tr> <tr> <th> 11 </th> <td> <code>^</code> </td> <td> Bitwise XOR (exclusive or) </td></tr> <tr> <th> 12 </th> <td> <code>|</code> </td> <td> Bitwise OR (inclusive or) </td></tr> <tr> <th> 13 </th> <td> <code>&amp;&amp;</code> </td> <td> Logical AND </td></tr> <tr> <th> 14 </th> <td> <code>||</code> </td> <td> Logical OR </td></tr> <tr> <th rowspan="7"> 15 </th> <td > <code>a?b:c</code> </td> <td > Ternary conditional </td> <td style="vertical-align: top" rowspan="7"> Right-to-left </td></tr> <tr> <td > <code>throw</code> </td> <td > throw operator </td></tr> <tr> <td > <code>=</code> </td> <td > Direct assignment (provided by default for C++ classes) </td></tr> <tr> <td > <code>+=</code>&nbsp;&nbsp; <code>-=</code> </td> <td > Compound assignment by sum and difference </td></tr> <tr> <td > <code>*=</code>&nbsp;&nbsp; <code>/=</code>&nbsp;&nbsp; <code>%=</code> </td> <td > Compound assignment by product, quotient, and remainder </td></tr> <tr> <td > <code>&lt;&lt;=</code>&nbsp;&nbsp; <code>&gt;&gt;=</code> </td> <td > Compound assignment by bitwise left shift and right shift </td></tr> <tr> <td> <code>&amp;=</code>&nbsp;&nbsp; <code>^=</code>&nbsp;&nbsp; <code>|=</code> </td> <td> Compound assignment by bitwise AND, XOR, and OR </td></tr> <tr> <th> 16 </th> <td> <code>,</code> </td> <td> Comma </td> <td> Left-to-right </td></tr></tbody></table>
++++++++++++++++++++++++++++++++++++++

TODO: couple of examples to showcase various precedence gotchas
// https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Criticism_of_bitwise_and_equality_operators_precedence


