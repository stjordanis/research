= The Badlands of C++: Professional Game Development
:author: Valentin Galea
:slidebackground: backgr_intro

ifdef::backend-slidy2[:slidebackground!:]
Who am I
--------
ifdef::backend-slidy2[]
[backgr_intro, opacity: .9; position: absolute; left: 15%; top: 10%;]
&&&&
image::img/intro.jpg["backgr"]
&&&&
endif::backend-slidy2[]
Valentin Galea - https://twitter.com/valentin_galea[@valentin_galea] +
more than 10 years doing mobile, indie and AAA games

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/vanity_plate.png["Games worked on", align="center"]

Currently at Splash Damage in London, UK.

Agenda
------
- Types of video games
- The industry
- Philosophy
- Platform
- Flavours of C++
- OOP & Alternatives
- Templates
- STL & Boost
- Exceptions
- Reflection & RTTI
- Conclusion

Types of games - AAA
--------------------
[quote, Wikipedia]
AAA games [...] informal classification used for video games with the highest development budgets and levels of promotion

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/AAA.jpg["AAA games", align="center", width="1024"]

Types of games - indie
----------------------
[quote, Wikipedia]
indie games [...] created without the financial support of a publisher

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/Indie.jpg["indie games", align="center", width="1024"]

Types of games - mobile
-----------------------
[quote, Wikipedia]
mobile games [...] played on a feature phone, smartphone, smartwatch, PDA, tablet computer

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/mobile.jpg["mobile games", align="center", width="1024"]

What I will talk about
----------------------
Mostly about AAA games...

[role="incremental"]
* have the most experience with
* they are the most process driven
* use C++ in very special and quirky ways (the purpose of the talk)

[role="incremental"]
Indie games

[role="incremental"]
* they share some elements with the above, but is in general more straighforward.

[role="incremental"]
Mobile games

[role="incremental"]
* usually written in something else: Objective C, C# - but they also do idiomatic C++.

What I won't talk about
-----------------------
Scripting languages...

[role="incremental"]
- normally AAA games supplement the C++ with another language for gameplay and level scripting
* Lua, Python, etc
* custom made: UnrealScript, DSL's, etc
- Visual scripting spaghetti
* UE4 "blueprints" ^https://docs.unrealengine.com/latest/INT/Engine/Blueprints/[1]^
* Guerilla Games Nodegraph system ^https://www.guerrilla-games.com/read/tools-for-the-job-part-1-the-nodegraph-system[2]^

[role="incremental"]
Tools

[role="incremental"]
* can be written in C++, but a lot of them are in C# or Python

[role="incremental"]
Building / Packaging game data

[role="incremental"]
* a nightmare on its own

The industry - It's a secret
----------------------------
image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/zelda_secret.gif["Secret", align="center"]

For various reasons, AAA development is covered in secrecy, source code included.

The industry (2)
----------------
Some of these reasons...

[role="incremental"]
- IP principles and copyright
- "first to market" desire and competition
- multiple stakeholders involved

[role="incremental"]
`id software` notably broke the trend and released the source code of all their _Doom_ and _Quake_ games.

[role="incremental"]
The rest of the industry didn't follow suit. Even `id` stopped after being acquired by the publisher Bethesda.

The industry (3)
----------------
Some modern AAA game engines changed their licensing and theyâ€™re now open...

- Unreal Engine 4 https://www.unrealengine.com/ue4-on-github
- CryEngine https://github.com/CRYTEK/CRYENGINE

[role="incremental"]
Studios sometimes release internal libraries for general use +
(examples to follow)

[role="incremental"]
NOTE: Everything here based on my experience so far, YMMV!

[role="incremental"]
NOTE: I will unfairly pick on Epic's UE4 :) +
- I work day to day with it +
- It does a lot of C++ questionable things 

A glimpse of good
-----------------
Source code snippet from _Doom 3_

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/doom3.png["Doom 3 src", align="center"]

TODO: a diff snippet (maybe .h decls)

TODO: more examples?

A glimpse of bad
----------------
Source code snippet from _CryEngine_

image::https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/cryengine.jpg["CryEngine 3 src", align="center"]

TODO: maybe show some UE4: like UEngine::Exec or FilterEdPoly

TODO: retake picture (line number and frame)

Philosophy
----------
Games need to run...

[role="incremental"]
* at least _30 FPS_ - _33 ms_ per frame
* _60+ FPS_ very desirable (obligatory for good multiplayer) - _16 ms_ per frame

[role="incremental"]
Everything is centered around achieving this frame time while pushing the graphics and gameplay

[role="incremental"]
Tradeoffs...

[role="incremental"]
- Stability can be sacrificed:
* a crash forgiven if it doesn't corrupt the save/user data
* limited concern for uptime (unless server)
- _low latency_ but _throughput_ more important - got to push millions of pixels to the screen!

Project size/LOC
----------------
AAA studios...

[role="incremental"]
- hundreds of people across various continents
- lots of wheel reinventions
- `legacy` of francize games and sequels

[role="incremental"]
...so amount of code quickly skyrockets:

[role="incremental"]
[quote, CppCon 2014: Nicolas Fleury "C++ in Huge AAA Games"]
_______
Assassin's Creed Unity:

* 6.5 M C++ LOC for entire team code.
* 9 M more C++ LOC from outside project.

Rainbow Six: Siege:

* 3.5 M C++ LOC for engine code from game team.
* 4.5 M C++ LOC from Technology Group.
_______

TODO: find more examples

Platform - Compiler
-------------------
By far and large Windows centric development - even for consoles

.MSVC
- is overwhelmingly used, almost de facto standard
- sometimes quite old versions, by now 2013+
- before C++11 lots of code depended on Microsoft quirks

.GCC
- rarely used on PC : mainly dedicated servers, or the odd Linux port
- prev gen consoles had vendor specific variants

.clang
- Playstation 4(R) uses it exclusively (with LLVM backend)

Platform - IDE
--------------
Again, Microsoft drives it:

.Visual Studio
- used everywhere: PC, Xbox One, PS4
- used with extensions:
* proprietary profilers & debuggers (TODO: examples)
* help with code completion & formatting: Visual Assist X, Resharper

.Others
- SN Systems: proprietary EDG front end for Sony until PS4
- Metroworks CodeWarrior for Nintendo consoles
- XCode - No :)

Compilation
-----------
Compilation and linking are usually dreadfully slow.

Optimizations are on by default, rarely debug builds are interactive.

Various tricks:

* `#pragma optimize` on/off "islands"
* only specific modules are debug
* mastery of reading optimized disassembly :)

End result usually a single executable - size is ridiculous!

Compilation (continued)
-----------------------
Some mitigation methods:

.Unity builds
Combine all or lots of source files into a couple of gigantic .cpp units

- improves speeds due to less churn on #include's and file I/O 
- can create hidden dependencies gotchas as opposed to normal pipeline 
- can hurt iteration (usual mitigation: extract out specific .cpp) 

.Distributed compilation
Use solution like `FastBuild` or `Incredibuild` to effectively create compilation farms

.Throw hardware at it
In a studio, programmers are spoiled: fastest CPU's, multiple SSD's etc

TODO: split into sep. slides - opportunity to add pics

Fighting the compiler
---------------------
.Head no warning!
A couple of favorites that are always off:

* signed/unsigned mismatch
* conversion from `T1` to `T2` requires a narrowing conversion

TODO: more from https://github.com/CRYTEK/CRYENGINE/blob/release/Code/CryEngine/CryCommon/CryCore/Compiler/MSVCspecific.h

TODO: from UE4

.Use the __force!
Eternal hope that magically sprinkling inline will makes things faster - it won't!

[source]
inline, __inline, __forceinline
TODO: gcc & clang

Flavors of C++
---------------
Traditionally was very C\+\+98 but by now C++11 is baseline.

C++14 in some select corners. The major engines help with this - `UE4` enables it by default.

Due to differences in people's experience, personality and time availability, adoption of the various new features and techniques is slow.

At Splash Damage, we try to counter this by:

* running a series of internal talks like "C++11/14 for game dev"
* newsletter about best practices and modern C++

TODO: split into list & maybe remove Splash section

Coding style
------------
Every studio has a set of guidelines or a complete style guide. +
Some of them recommend things that would really upset a C++ purist!

.Namespaces
* not preferred (with exceptions: anonymous to force internal linkage)
* Instead everything has a game specific prefix:
** `CShooterComponent`, `TShooterItem`, `EShooterState` etc

.Trivia
* CamelCase rules the nation
* K&R (or "Egyptian") style of braces very frowned upon - Allman is almost always used
* `auto` destroys friendships

OOP is king
-----------
All game code is universally OOP driven.

.Polymorphism
* the preferred default technique
* "What is a v-table?" - most asked interview question!

.ECS
* Entity-Component-Systems are prevalent in gameplay code
* Everything hierachy of `Entity`, `Node` or `Object`'s
* Components do virtual `Update`, `Tick`, `Draw` or `Render`
* usually AOS rather than SOA

.Communication
* normally just tight coupling
* delegate/event systems (heavily macro'ed! for "usability"!) 

Alternatives to OOP
-------------------
Need for multithreading continuously growing:

* I/O systems, loading & saving
* Rendering, Animation, Navigation, etc decoupled from gameplay
* Online sub-systems and services

.New paradigms emerging
- Functional style 'monad' continuations - `.Then()`, `.With()` etc
- "Job-ifying" 
* Parallel Patterns Library (PPL) from Microsoft
* Threading Building Blocks from Intel
- Seldom the standard `future` and `promise` - usually every game engine has own equivalents

Templates
---------
Generally, there is a tendency to downplay templates. Changing now with modern standards and mature compilers.

.Normal usage
* container work obviously
* policy design: allocator, rendering, etc
* variadic templates used to be emulated with "up to 11 arguments" horible macros

.Metaprogramming
* seen as black magic and highly discouraged
* due to project size - isolated islands where it thrives
* sometimes custom reduced specific `enable_if`, `void_t`, traits etc

.Macros == poor man's templates
Still a tendecy to use macros where `template` or `constexpr` functions would be more adequate:

* `min()` and `max()`
* generic relational operator declarations
* hash functions declarations

STL
---
Adoption generally low.

* console games never ship with STL containers
* used more in PC-only/indie
* iostreams are the devil's work!

.Bespoke alternatives - because
* specific allocation needs (and poor allocator model pre C++17)
* associated (or perceived) bloat
* slow or cumbersome debugging
* not everyone is willing to follow STL coding style and naming

STL (continued)
---------------
`std::string` - best example:

* every studio/engine reinvents the string wheel
* specific localization needs - ties with game data
* previous STL implementations made awkward choices (Ex: copy on write on older GCC)
* no need for streams: C printf style prefered, I/O handled in bulk elsewhere

.iterator
* the `Iterator` concept is copied and reimplemented - if nothing else just to enable ranged-for's.

[EA]STL
-------
.EASTL from Electronic Arts
A video game specific implementation of STL +
https://github.com/electronicarts/EASTL

TODO: more detail

STL - SG14
----------
.SG14 group
Video games and embedded programming sub-group within the ISO C++ Standard's Study Group +
Tries to propose new, optimized containers, data structures even language changes.

TODO: quick enum of the papers in-flight

Boost
-----
Very frowned upon and sometimes even forbidden.

.Reasons
- clash of cultures:
* Boost is "academic" and research driven
* game dev is pragmatic and get-it-done
- historically didn't play well with MSVC
* still doesn't: `boost::hana` (but getting very close)
- by now best libraries made it into the standard
- difficulty to integrate & setup

.bcp
Last point made easier by the `bcp` tool: +
allows to extract-out features with no dependencies

TODO: Carmack tweet

TODO: tweet https://pbs.twimg.com/media/C5TrLWPWMAAQGex.jpg

Exceptions
----------
TODO: introduce better

[source]
---------------------------------------
#include <stdexcept>

int func()
{
    throw std::exception();
}
---------------------------------------

Compiled with `/O2` optimisations on VS 2017.

Let's see disassembly: https://godbolt.org/g/wQXmTi

Exceptions (continued)
----------------------
image:https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/exception_1.png["asm", align="center"]

Exceptions (continued)
----------------------
image:https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/exception_2.png["asm", align="center"]

Exceptions (continued)
----------------------
Almost never used due to speed penalties of `throw`-ing and `catch`-ing.

Usually (and always during dev time) a hard exit is requested on error.

That means errors in constructors cannot be handled. Usual solution is to have 'Create'/'Instantiate'/'Begin' etc (SPEAKER: this is also due to GC and serialization)

That's why people don't care or don't know about `noexcept`.

RTTI
----
Seldom used - normally turned off by default because it bloats the modules size.	

Very rare use of `dynamic_cast` - usually reimplemented manually via custom reflection.

Reflection
----------
A lot of games have an involved reflection system due to:

* close live link with editors/tools: values inspection, code hot reload
* serialization for loading/saving; versioning
* network replication, RPC's
* garbage collection

Custom, individual solutions:

* pre-processor based decorations that both annotate code and generate registration calls
* template metaprogramming for same purpose
* mini IDL's that generate additional cpp/h files

Reflection (continued)
---------------------
Some examples:

image:https://raw.githubusercontent.com/valentingalea/research/master/badlands/img/reflection.PNG["reflection", align="center"]

TODO: more examples & details

TODO: turn from pic to src

Closing
-------
There you have it - a short survey of C++ in game development!

`@valentin_galea`

TODO: a more clear conclusion & take away points

Attributions
------------
- made with http://www.methods.co.nz/asciidoc/index.html[Asciidoc]
ifdef::backend-slidy2[]
- using https://github.com/mosabua/asciidoc-slidy2-backend-plugin[Slidy2 plugin]
- intro background image: (CC BY-SA 3.0) modified, original https://commons.wikimedia.org/wiki/File:Badlands_National_Park_-_panoramio_(2).jpg[here]
endif::backend-slidy2[]
